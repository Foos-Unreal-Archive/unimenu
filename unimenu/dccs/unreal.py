import unreal
import warnings
from unimenu.dccs.qt import QtMenuMaker


class MenuMaker(QtMenuMaker):  # todo believe this doesnt need qt, but can use normal menumaker
    @classmethod
    def setup_menu(cls, data):
        parent_menu_name = data.get("parent", "LevelEditor.MainMenu")
        unreal_menus = unreal.ToolMenus.get()
        parent_menu = unreal_menus.find_menu(parent_menu_name)
        if not parent_menu:
            warnings.warn(f"Parent menu '{parent_menu_name}' not found, couldn't setup menu")

        menu_items = cls._setup_menu_items(parent_menu, data.get("items"))
        unreal_menus.refresh_all_widgets()
        return menu_items
        # TODO decide to return success/failure, or the menu object

    @classmethod
    def add_to_menu(cls, parent, label: str, command: str, icon="", tooltip="") -> unreal.ToolMenuEntry:
        """add a menu item to the script menu"""
        entry = unreal.ToolMenuEntry(
            # name="Python.MyCoolTool",  # this needs to be unique! if not set, it's autogenerated
            type=unreal.MultiBlockType.MENU_ENTRY,
            insert_position=unreal.ToolMenuInsert("", unreal.ToolMenuInsertType.FIRST),
        )
        if label:
            entry.set_label(label)
        if command:
            entry.set_string_command(
                type=unreal.ToolMenuStringCommandType.PYTHON,
                string=command,
                custom_type=unreal.Name("_placeholder_"),
            )  # hack: unsure what custom_type does, but it's needed
        if tooltip:
            entry.set_tool_tip(tooltip)
        if icon:
            entry.set_icon(icon)  # naive implementation todo improve

        parent.add_menu_entry("Scripts", entry)  # always returns None
        return entry

    @classmethod
    def add_sub_menu(cls, parent, label: str, tool_tip="") -> unreal.ToolMenu:
        """add a submenu to the script menu"""
        return parent.add_sub_menu(
            owner=parent.menu_name,
            section_name="PythonTools",
            name=label,  # todo check if needs to be uniqye like in add_to_menu
            label=label,  # todo add label support
            tool_tip=tool_tip,
        )

    @classmethod
    def add_separator(cls, parent) -> None:  # todo not working yet
        """add a separator to the script menu"""
        # see https://docs.unrealengine.com/4.27/en-US/PythonAPI/class/ToolMenu.html
        # todo what is diff with dynamic section?
        return parent.add_section(section_name="Test", label="World")

    @classmethod
    def teardown(cls):
        """remove from menu"""
        raise NotImplementedError("not yet implemented")
